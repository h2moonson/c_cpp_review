1. Python List vs. NumPy Array

    A Python list can contain elements of different data types.
    A NumPy array can only contain elements of a single data type because its memory layout is contiguous.
    Due to this, NumPy arrays are much faster than Python lists.

2. Data Type of a NumPy Array

    To find out the data type of a NumPy array, use np_array.dtype.
    Example:

    python

    a = np.array([1, 2.3, 3, 4])
    print(a.dtype)  # Output: dtype('float64')

3. 1D Array

    A one-dimensional (1D) array is called a "Vector".
    Example:

    python

    a = np.array([1, 2, 3, 4])

4. 2D Array

    A two-dimensional (2D) array is called a "Matrix".
    It has rows and columns.
    Example:

    python

    a = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])

    Number of rows: len(a)
    Number of columns: len(a[0])

5. Higher-Dimensional Arrays

    A 3D or higher-dimensional array is called a "Tensor".

6. Creating a NumPy Array Filled with Zeros or Ones

    Example:

    python

    a = np.zeros(10, dtype=np.int8)  # dtype can be omitted
    b = np.ones((row, col))

7. np.arange: Creating an Increasing Sequence

    Similar to Python's range function, but it does not include the end value.
    Example:

    python

    a = np.arange(1, 10, 2)
    print(a)  # Output: array([1, 3, 5, 7, 9])

8. np.linspace: Creating an Array with Evenly Spaced Values

    Generates an array with evenly spaced values between a start and end value (inclusive).
    Example:

    python

    a = np.linspace(0, 100, 5, dtype=np.int32)
    print(a)  # Output: array([ 0, 25, 50, 75, 100], dtype=int32)

9. Array Dimensions and Shape

    To check the number of dimensions (ndim) and the shape of the array:

    python

    print(a1.ndim)  # Example Output: 1
    print(a2.ndim)  # Example Output: 2
    print(a3.ndim)  # Example Output: 3

    print(a1.shape)  # Example Output: (5,)
    print(a2.shape)  # Example Output: (2, 4)
    print(a3.shape)  # Example Output: (3, 2, 3)

10. Reshaping Arrays

    10.1 Reshape:
    Reshaping allows you to change the shape of an array without changing its data.
    Example:

    python

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
b = a.reshape(2, 5)
print(b)
# Output:
# array([[ 1,  2,  3,  4,  5],
#        [ 6,  7,  8,  9, 10]])

10.2 Transpose:
Transposing swaps the rows and columns of an array.
Example:

python

    a = np.array([[1, 2, 3], [4, 5, 6]])
    b = a.T
    print(b)
    # Output:
    # array([[1, 4],
    #        [2, 5],
    #        [3, 6]])

