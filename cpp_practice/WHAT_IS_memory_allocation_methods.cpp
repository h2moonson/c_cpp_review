// 동적 메모리 할당을 사용하는 이유와 배열의 메모리 할당 방식에 대해 설명드리겠습니다.

// ### 1. 동적 메모리 할당의 이유

// #### **1.1 유연한 메모리 사용**
// 정적 배열(컴파일 시점에 크기가 결정된 배열)은 프로그램 실행 시 전체 크기가 미리 결정되어야 합니다. 이는 메모리 사용의 유연성을 제한할 수 있습니다. 동적 메모리 할당을 사용하면 프로그램 실행 중에 필요한 만큼만 메모리를 할당하고, 필요 없을 때 해제할 수 있어 메모리 사용의 효율성을 높일 수 있습니다.

// - **실행 중 크기 결정**: 사용자가 입력한 값에 따라 메모리 크기를 결정하거나, 다른 입력 데이터에 따라 유연하게 크기를 변경해야 할 경우 동적 메모리 할당이 필요합니다.
  
//   예를 들어, 다음과 같은 상황에서 동적 메모리 할당이 유용합니다:
  int n;
  std::cin >> n; // 사용자가 크기를 입력
  int* arr = new int[n]; // 사용자가 입력한 크기에 따라 동적 배열 할당

// #### **1.2 큰 메모리 블록 할당**
// 프로그램의 스택(stack)에는 제한된 크기의 메모리가 할당되기 때문에, 매우 큰 배열을 선언할 경우 스택 오버플로우(stack overflow)와 같은 문제가 발생할 수 있습니다. 동적 메모리 할당을 사용하면 힙(heap) 메모리를 사용하여 더 큰 메모리 블록을 할당할 수 있습니다.


  int largeArray[1000000]; // 스택 오버플로우 위험
  int* largeArray = new int[1000000]; // 힙에 할당, 더 안전

// #### **1.3 메모리 사용 최적화**
// 동적 메모리 할당을 통해 필요한 메모리만 사용하고, 더 이상 필요 없을 때 해제하여 다른 프로그램이 사용할 수 있도록 메모리를 반환할 수 있습니다. 이로 인해 전체 시스템의 메모리 사용 효율이 개선됩니다.

  int* data = new int[100];
  // data를 사용한 후
  delete[] data; // 메모리 해제

// ### 2. 정적 배열의 메모리 관리

// #### **2.1 정적 배열의 메모리 할당**
// 정적 배열은 프로그램이 실행될 때 스택에 메모리가 할당됩니다. 컴파일 시점에서 크기가 결정되며, 실행 중에 크기를 변경할 수 없습니다. 또한, 정적 배열의 메모리는 프로그램이 종료될 때까지 자동으로 관리되며, 명시적으로 해제할 수 없습니다.

// - **메모리 해제 불가능**: 정적 배열은 스코프(변수가 선언된 범위)를 벗어날 때 자동으로 메모리가 해제됩니다. 이를 직접 해제할 수는 없습니다.
  
//   예를 들어:

  void foo() {
      int arr[100]; // foo 함수 내에서만 유효한 정적 배열
  } // foo가 종료되면 arr의 메모리가 자동으로 해제됨


// #### **2.2 정적 배열의 한계**
// - **고정된 크기**: 정적 배열의 크기는 프로그램 컴파일 시에 결정되므로, 다양한 크기의 데이터를 처리하는 프로그램에서 비효율적일 수 있습니다. 
// 프로그램이 실행될 때 크기가 변경되지 않기 때문에, 예상보다 큰 데이터가 들어오면 문제가 발생할 수 있습니다.
  
// - **메모리 낭비**: 정적 배열을 충분히 큰 크기로 선언했다가 실제로는 그 크기보다 작은 데이터를 사용하는 경우, 할당된 메모리 중 일부는 사용되지 않아 낭비됩니다.

// ### 3. 동적 메모리 할당의 이점

// - **필요한 만큼만 메모리 사용**: 동적 메모리 할당을 통해 실제로 필요한 메모리만 할당하고, 더 이상 필요하지 않을 때 해제하여 메모리 낭비를 줄일 수 있습니다.

// - **메모리 해제 가능**: 동적 메모리 할당을 통해 얻은 메모리는 `delete` 또는 `delete[]`를 사용하여 명시적으로 해제할 수 있습니다.
//  이로 인해 메모리 누수(memory leak)를 방지할 수 있습니다.

// - **힙 메모리 활용**: 스택 메모리의 제한을 피하기 위해 힙 메모리를 사용하여 더 큰 메모리 할당이 가능하며, 프로그램의 안정성을 높일 수 있습니다.

// ### 결론

// 정적 배열은 간단하고 사용하기 쉽지만, 유연성이 부족하고 메모리 사용의 효율성이 떨어질 수 있습니다. 반면, 동적 메모리 할당은 프로그램이 실행되는 동안 메모리를 효율적으로 관리하고, 메모리 누수를 방지하며, 큰 데이터를 처리할 수 있도록 도와줍니다. 
// 따라서 프로그램의 요구사항에 따라 적절한 메모리 할당 방식을 선택하는 것이 중요합니다.